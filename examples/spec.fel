// same
var foo1 = function() {};
function foo2() {}

function test_variables()
{
    // declare and initialize variables, terminate with semicolon
    var a = 3;

    // variables must be declared before use, but inialization is not required, variables not initialized are set to null
    var not_initialized;
    var not_initialized_too = null;

    // it is an error to declare a already declared variable
    // var a = 3;

    // variables can be integers, floats, booleans, enums(later), strings, functions, tables/objects/dictionaries/maps and arrays...
    var some_string = "hello world";

    var a_bool = true;
    var another_bool = false;

    // integers are implicitly cast to floats when needed
    var a_int = 3;
    var a_float = 3.0;
    var also_a_float = a_int + a_float

    // todo: figure out how to handle a_int / another_int, if both should be converted to float or it should be a integer division

    ////////////////////////////////////////////////////////////////////////
    // there are tables/object/structs/dictonary/map
    var table1 = {};

    // unable to set the value since it hasn't been declared
    // table1.value = 3;

    // declare variable on the table
    var table1.value = 3;

    // need to set it as a string index instead, keys are always strings!
    table1['value'] = 3;

    // we can use it in the same way
    table1['another_value'] = 3 + table1['value'];

    // still can't set it though
    // table1.value = 3;

    // we can set values with name=value syntax
    var table2 = { what="Dog" };

    // now we can acces it as a member
    table2.what = "Cat";

    ////////////////////////////////////////////////////////////////////////
    // then there is arrays
    var array1 = [];

    // arrays are like table/objects except they lack direct access and the index is continus set of positive integers from starting from 0
    
    // indexing out of bounds is a error
    // array1[0] = 3;

    // to create a array with size 3, you comma seperate the values
    var array2 = [1, 2, 3];

    // this assigns all the elements to [3, 2, 1] instead
    array2[0] = 3;
    array2[2] = 1;

    // this array can also be created with iterator syntax
    array2 = [1..3];

    // the .. syntax can also be used in tables, but here it means add/replace another table and is used differently
    var table3 = {name="Rex", ..table2}; // table3 is a shallow copy of table2, if name was in table2, it is now replaced
}

function test_functions()
{
    // this is a function
    var f1 = function() {}

    // it behaves like a variables, so we can assign a new function to a variable
    f1 = function() {}

    // function can optionally return 1 value
    var f2 = function() {return 3;}
    var ret1 = f2();
    // functions with no explicit return statement or not specifying the return value returns null

    // function can take 0 or more arguments
    var f3 = function(a, b, c) {}
    f3(1, 2, 3);
    
    // arguments not specified are passed as null
    f3(1, 2); // c is null here

    // default values can be specified, and positional arguments can be used and are evaluated is specified order and then left to right
    var f4 = function(a=1, b=2, c=3) {}
    f4(c=1, a=3); // 3, 2, 1, eval order: c a b

    // functions called on tables are implicitly passed a argument called this
    var table1 = {}
    var table1.fun = function() {this.what = "Dog";}
    table1.fun();
}

function test_conditionals()
{
    var a = 3;

    // if statements with optional else, {} are mandatory
    if(a == 3) {
        // this is another a, outer a is not modified
        var a = 4;
    }
    else {
        // this is the same a as outer
        a = 5;
    }

    // scopes are started with the keyword scope, syntactic sugar for if(true)
    scope {}

    // while loops...
    while(a > 2)
    {
        a = a - 1;
    }

    // loop are syntactic sugar for while(true)
    loop
    {
        a = a + 1; 
        if(a > 10)
        {
            // use break to stop loop
            // or return to return from function
            // todo: allow break?
            break;
        }
    }

    // foreach loop
    var array = [1..3];
    for(var a in array)
    {
        // a is the value (1, 2 and then 3)
        // here a shaddows the outer a, declared at the start of the function
    }

    // use a iterator syntax here instead, this does not create an array
    for(var a in 1..3)
    {
    }

    // use split/destruction to also use index
    for(var (i, a) in ["a", "b", "c"])
    {
        // i is the index in the array
        // a is the string value
    }

    // loop over the values in a table/map
    var table = {a=1, b=2, c=3};
    for(var a in table)
    {
        // a.key is a, b or c
        // a.value is 1, 2, or 3
    }

    // table iteration can use split too
    for(var (key, value) in table)
    {
        // like before
    }
}

function test_types()
{
    // types are implicit and optional, so for we haven't specified the types on our variables but lets start
    
    // declared without value, this is the any type
    var a;
    var also_a : any;

    // int type
    var b = 3;
    var also_b : int = 3;

    // float type
    var c = 3.0;
    var also_c : float = 3.0;

    // bool type
    var d = false;
    var also_d : bool = false;

    // any array
    var e = [];
    var also_e : [any] = [];

    // int array
    var f = [1, 2, 3];
    var also_f : [int] = [1, 2, 3];

    // syntax error: 3.0 is not a integer
    // var f = [1, 2, 3.0]

    // float array
    var g = [1.0, 2, 3];
    var also_g : [float] = [1.0, 2, 3];
    // 2 and 3 are implicitly converted to float

    
}
